// OpenRouter API Integration for EasyParle Post Generator

/**
 * This file contains the implementation of OpenRouter API integration
 * for the EasyParle Social Media Post Generator.
 * 
 * It provides functions to:
 * 1. Make actual API calls to OpenRouter
 * 2. Switch between different AI models
 * 3. Process responses from the API
 */

// OpenRouter API endpoint
const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';

// Available models
const AVAILABLE_MODELS = [
    {
        id: 'openai/gpt-4o',
        name: 'GPT-4o',
        provider: 'OpenAI',
        description: 'Latest multimodal model from OpenAI with strong reasoning capabilities'
    },
    {
        id: 'anthropic/claude-3-opus',
        name: 'Claude 3 Opus',
        provider: 'Anthropic',
        description: 'Most powerful Claude model with exceptional reasoning and writing'
    },
    {
        id: 'anthropic/claude-3-sonnet',
        name: 'Claude 3 Sonnet',
        provider: 'Anthropic',
        description: 'Balanced Claude model with good performance and speed'
    },
    {
        id: 'google/gemini-pro',
        name: 'Gemini Pro',
        provider: 'Google',
        description: 'Google\'s advanced model with strong reasoning capabilities'
    },
    {
        id: 'meta-llama/llama-3-70b-instruct',
        name: 'Llama 3 70B',
        provider: 'Meta',
        description: 'Meta\'s largest open model with strong instruction following'
    },
    {
        id: 'mistral/mistral-large',
        name: 'Mistral Large',
        provider: 'Mistral AI',
        description: 'Powerful model from Mistral AI with excellent performance'
    }
];

/**
 * Make an API call to OpenRouter
 * @param {string} prompt - The prompt to send to the API
 * @param {string} model - The model ID to use
 * @param {string} apiKey - The OpenRouter API key
 * @returns {Promise<string>} - The generated text
 */
async function callOpenRouterAPI(prompt, model, apiKey) {
    try {
        // Prepare the request body
        const requestBody = {
            model: model,
            messages: [
                {
                    role: "user",
                    content: prompt
                }
            ]
        };

        // Make the API call
        const response = await fetch(OPENROUTER_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
                'HTTP-Referer': window.location.origin, // Required by OpenRouter
                'X-Title': 'EasyParle Post Generator' // Optional but recommended
            },
            body: JSON.stringify(requestBody)
        });

        // Check if the response is OK
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`API Error: ${errorData.error?.message || 'Unknown error'}`);
        }

        // Parse the response
        const data = await response.json();
        
        // Extract the generated text
        const generatedText = data.choices[0]?.message?.content;
        
        if (!generatedText) {
            throw new Error('No content generated by the API');
        }
        
        return generatedText;
    } catch (error) {
        console.error('Error calling OpenRouter API:', error);
        throw error;
    }
}

/**
 * Generate content variations using OpenRouter API
 * @param {string} prompt - The prompt to send to the API
 * @param {number} count - The number of variations to generate
 * @param {string} model - The model ID to use
 * @param {string} apiKey - The OpenRouter API key
 * @returns {Promise<string[]>} - Array of generated variations
 */
async function generateContentVariations(prompt, count, model, apiKey) {
    try {
        // Enhance the prompt to request multiple variations
        const enhancedPrompt = `Generate ${count} different variations of this social media post. 
        Each variation should maintain the key message but use different wording, structure, and style.
        Format your response as a numbered list with each variation clearly separated.
        
        Original post: ${prompt}`;
        
        // Call the API
        const response = await callOpenRouterAPI(enhancedPrompt, model, apiKey);
        
        // Parse the response to extract individual variations
        // This is a simple implementation - might need adjustment based on actual API responses
        const variations = response
            .split(/\d+\./)  // Split by numbered list format
            .filter(text => text.trim().length > 0)  // Remove empty items
            .map(text => text.trim());  // Clean up each variation
        
        // If we didn't get enough variations, pad the array
        while (variations.length < count) {
            variations.push(`Variation ${variations.length + 1}: Unable to generate this variation.`);
        }
        
        // If we got too many variations, trim the array
        return variations.slice(0, count);
    } catch (error) {
        console.error('Error generating content variations:', error);
        throw error;
    }
}

/**
 * Enhance post content using OpenRouter API
 * @param {string} content - The original content
 * @param {string} option - The enhancement option (shorter, longer, emojis, etc.)
 * @param {string} tone - The desired tone
 * @param {string} platform - The social media platform
 * @param {string} model - The model ID to use
 * @param {string} apiKey - The OpenRouter API key
 * @returns {Promise<string>} - The enhanced content
 */
async function enhancePostContent(content, option, tone, platform, model, apiKey) {
    try {
        // Prepare the prompt based on the enhancement option
        let prompt;
        
        switch (option) {
            case 'shorter':
                prompt = `Make this ${platform} post shorter and more concise while maintaining the key message. Use a ${tone} tone: ${content}`;
                break;
            case 'longer':
                prompt = `Expand this ${platform} post with more details and engaging content. Use a ${tone} tone: ${content}`;
                break;
            case 'emojis':
                prompt = `Add appropriate emojis to this ${platform} post to make it more engaging. Use a ${tone} tone: ${content}`;
                break;
            case 'hashtags':
                prompt = `Optimize the hashtags for this ${platform} post to improve discoverability. Use a ${tone} tone: ${content}`;
                break;
            case 'seo':
                prompt = `Enhance this ${platform} post with relevant keywords for better visibility. Use a ${tone} tone: ${content}`;
                break;
            default:
                prompt = `Improve this ${platform} post to make it more engaging. Use a ${tone} tone: ${content}`;
        }
        
        // Call the API
        return await callOpenRouterAPI(prompt, model, apiKey);
    } catch (error) {
        console.error('Error enhancing post content:', error);
        throw error;
    }
}

/**
 * Generate image prompt for AI image generation
 * @param {string} content - The post content
 * @param {string} style - The desired image style
 * @param {string} ratio - The aspect ratio
 * @param {string} model - The model ID to use
 * @param {string} apiKey - The OpenRouter API key
 * @returns {Promise<string>} - The generated image prompt
 */
async function generateImagePrompt(content, style, ratio, model, apiKey) {
    try {
        // Prepare the prompt
        const prompt = `Create a detailed image generation prompt for a dental chatbot social media post.
        
        Post content: ${content.substring(0, 300)}...
        
        Style: ${style}
        Aspect ratio: ${ratio}
        
        The image should be professional, related to dental practice, and suitable for social media.
        Focus on creating a prompt that would generate an image showing the benefits of using an AI chatbot for dental appointment booking.
        
        Return ONLY the image generation prompt, nothing else.`;
        
        // Call the API
        return await callOpenRouterAPI(prompt, model, apiKey);
    } catch (error) {
        console.error('Error generating image prompt:', error);
        throw error;
    }
}

// Export the functions and constants for use in the main application
window.OpenRouterAPI = {
    callOpenRouterAPI,
    generateContentVariations,
    enhancePostContent,
    generateImagePrompt,
    AVAILABLE_MODELS
};
